
----------------------------------------------------------------------------------------------------
I dream of extentions...

f :: Fix a -> Fix b ->     c |>
         a ->     b ->     c
f' x y = f (Fixed x) (Fixed y)

f ::  an0 -> an1 -> .. -> anm |>
       .      .           .
       .      .           .
       ^      ^           |
       |      |           v
      a10 -> a11 -> .. -> a1m |>
       ^      ^           |
       |      |           v
      a00 -> a01 -> .. -> a0m

fn = demote n $ f(n-1) (promote x0) (promote x1) .. (promote xm)
 .          .    .               .            .              .
 .          .    .               .            .              .
f2 = demote 2 $ f3     (promote x0) (promote x1) .. (promote xm)
f1 = demote 1 $ f2     (promote x0) (promote x1) .. (promote xm)
f0 =            f1     (promote x0) (promote x1) .. (promote xm)

f ::  .   ->   .        .
      .   ->   .        .
      ^   ->   ^        |
      |        |        v
    [[a]] -> [[b]] -> [[c]] |>
      ^        ^        |
      |        |        v
     [a] ->   [b] ->   [c]

fn = join^n $ f{n-1} [x0] [x1]
 .
 .
f1 = join^2 $ f2     [x0] [x1]
f0 = join  $ f3     [x0] [x1]

f ::  .   ->     .          .
      .   ->     .          .
      ^   ->     ^          |
      |          |          v
  m (m a) -> m (m b) -> m (m c) |>
      ^          ^          |
      |          |          v
     m a  ->    m b  ->    m c

fn = join^n $ f{n-1} (return x0) (return x1)
 .
 .
f1 = join^2 $ f2     (return x0) (return x1)
f0 = join  $ f3     (return x0) (return x1)

So we have:
- a rectangle of types, related by promotion/demotion
- a promoter
- a demoter

- argument xi is any from [a0i, a1i, ..]
- all arguments are stored
- upon return, all arguments are promoted to highest level of any argument
- return value is demoted
- actual function may either have the type of the highest level or an arbitrary level
- lower levels than defined are automatically generated
- promoter/demoter must have a simple inductive type

- There may be a promoter for *each* input type
- The promoter may be either default or specified
----------------------------------------------------------------------------------------------------


